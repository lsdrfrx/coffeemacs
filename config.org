#+TITLE:coffeemacs
#+AUTHOR:lsdrfrx

* Core configuration
** Options
#+BEGIN_SRC emacs-lisp
  ; Disable default message
  (setq inhibit-startup-message t)
  (setq inhibit-startup-echo-area-message t)

  ; Show relative line numbers
  (global-display-line-numbers-mode t)
  (setq display-line-numbers-type 'relative)

  (electric-pair-mode 1) ; Electric plugin configuration
  (show-paren-mode t) ; Show parenthesies pairs

  ; Scroll settings
  (setq scroll-step 1)
  (setq scroll-margin 5)
  (setq package-install-upgrade-built-in t)

  ; Tabs settings
  (setq-default indent-tabs-mode nil)
  (setq tab-width 2)

  ; Turn off distracting UI components
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

  ; Start Emacs in fullscreen
  (add-to-list 'default-frame-alist '(fullscreen . fullboth)) 

  ; Font settings
  (global-font-lock-mode t)
  (add-to-list 'default-frame-alist '(font . "VictorMono Nerd Font 16"))
  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+END_SRC

** Keybinds
*** Treemacs
**** Open Treemacs
#+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "<space> e") 'treemacs)
#+END_SRC
*** Show opened buffer
#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-x\C-b" 'electric-buffer-list)
#+END_SRC

*** Org-roam
**** Insert new node
#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-x\C-n" 'org-roam-node-insert)
#+END_SRC

** Package manager setup
#+BEGIN_SRC emacs-lisp
    ;; Configure built in package manager
    (require 'package)
    (package-initialize)
    (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
    (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/"))
    ;; Installing use-package
    (when (not (package-installed-p 'use-package))
    (package-refresh-contents)
    (package-install 'use-package))
    (eval-when-compile
    (require 'use-package))
    (custom-set-variables
    ;; custom-set-variables was added by Custom.
    ;; If you edit it by hand, you could mess it up, so be careful.
    ;; Your init file should contain only one such instance.
    ;; If there is more than one, they won't work right.
    '(package-selected-packages
    '(seq org-roam lsp-pyright lsp-mode treemacs-tab-bar treemacs-persp treemacs-magit treemacs-icons-dired treemacs-projectile treemacs-evil treemacs use-package)))
    (custom-set-faces
    ;; custom-set-faces was added by Custom.
    ;; If you edit it by hand, you could mess it up, so be careful.
    ;; Your init file should contain only one such instance.
    ;; If there is more than one, they won't work right.
    )
#+END_SRC

** Hooks
#+BEGIN_SRC emacs-lisp
  ; TODO: Fix this hook
  ; TODO: Move this hook to evil-mode use-package hook
  (defun disable-evil ()
    (if (string= (buffer-name (current-buffer)) "*scratch*")
        (progn
          (evil-local-mode -1)
          (message "LIGHTWEIGHT BABYYYYYYYYYY"))))

  (add-hook 'after-init-hook 'disable-evil)
#+END_SRC

* Plugins
** Color themes
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes :ensure t)
  (use-package kanagawa-theme :ensure t)
;  (if (daemonp)
;    (add-hook 'after-make-frame-functions
;              (defun my/theme-init-daemon (frame)
;                (with-selected-frame frame
;                  (load-theme 'kanagawa))
;                ;; Run this hook only once.
;                (remove-hook 'after-make-frame-functions
;                             #'my/theme-init-daemon)
;                (fmakunbound 'my/theme-init-daemon)))
  (load-theme 'kanagawa)

  (set-frame-parameter nil 'alpha-background 70)
  (add-to-list 'default-frame-alist '(alpha-background . 70))
#+END_SRC

** Treemacs
#+BEGIN_SRC emacs-lisp
    (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
        (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
        (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay        0.5
            treemacs-directory-name-transformer      #'identity
            treemacs-display-in-side-window          t
            treemacs-eldoc-display                   'simple
            treemacs-file-event-delay                2000
            treemacs-file-extension-regex            treemacs-last-period-regex-value
            treemacs-file-follow-delay               0.2
            treemacs-file-name-transformer           #'identity
            treemacs-follow-after-init               t
            treemacs-expand-after-init               t
            treemacs-find-workspace-method           'find-for-file-or-pick-first
            treemacs-git-command-pipe                ""
            treemacs-goto-tag-strategy               'refetch-index
            treemacs-header-scroll-indicators        '(nil . "^^^^^^")
            treemacs-hide-dot-git-directory          t
            treemacs-indentation                     2
            treemacs-indentation-string              " "
            treemacs-is-never-other-window           nil
            treemacs-max-git-entries                 5000
            treemacs-missing-project-action          'ask
            treemacs-move-forward-on-expand          nil
            treemacs-no-png-images                   nil
            treemacs-no-delete-other-windows         t
            treemacs-project-follow-cleanup          nil
            treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-position                        'left
            treemacs-read-string-input               'from-child-frame
            treemacs-recenter-distance               0.1
            treemacs-recenter-after-file-follow      nil
            treemacs-recenter-after-tag-follow       nil
            treemacs-recenter-after-project-jump     'always
            treemacs-recenter-after-project-expand   'on-distance
            treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
            treemacs-project-follow-into-home        nil
            treemacs-show-cursor                     nil
            treemacs-show-hidden-files               t
            treemacs-silent-filewatch                nil
            treemacs-silent-refresh                  nil
            treemacs-sorting                         'alphabetic-asc
            treemacs-select-when-already-in-treemacs 'move-back
            treemacs-space-between-root-nodes        t
            treemacs-tag-follow-cleanup              t
            treemacs-tag-follow-delay                1.5
            treemacs-text-scale                      nil
            treemacs-user-mode-line-format           nil
            treemacs-user-header-line-format         nil
            treemacs-wide-toggle-width               70
            treemacs-width                           35
            treemacs-width-increment                 1
            treemacs-width-is-initially-locked       t
            treemacs-workspace-switch-cleanup        nil)

        ;; The default width and height of the icons is 22 pixels. If you are
        ;; using a Hi-DPI display, uncomment this to double the icon size.
        ;;(treemacs-resize-icons 44)

        (treemacs-follow-mode t)
        (treemacs-filewatch-mode t)
        (treemacs-fringe-indicator-mode 'always)
        (when treemacs-python-executable
        (treemacs-git-commit-diff-mode t))

        (pcase (cons (not (null (executable-find "git")))
                    (not (null treemacs-python-executable)))
        (`(t . t)
        (treemacs-git-mode 'deferred))
        (`(t . _)
        (treemacs-git-mode 'simple)))

        (treemacs-hide-gitignored-files-mode nil))
    :bind
    (:map global-map
            ("M-0"       . treemacs-select-window)
            ("C-x t 1"   . treemacs-delete-other-windows)
            ("C-x t t"   . treemacs)
            ("C-x t d"   . treemacs-select-directory)
            ("C-x t B"   . treemacs-bookmark)
            ("C-x t C-t" . treemacs-find-file)
            ("C-x t M-t" . treemacs-find-tag)))

    (use-package treemacs-evil
    :after (treemacs evil)
    :ensure t)

    (use-package treemacs-projectile
    :after (treemacs projectile)
    :ensure t)

    (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once)
    :ensure t)

    (use-package treemacs-magit
    :after (treemacs magit)
    :ensure t)

    (use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
    :after (treemacs persp-mode) ;;or perspective vs. persp-mode
    :ensure t
    :config (treemacs-set-scope-type 'Perspectives))

    (use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
    :after (treemacs)
    :ensure t
    :config (treemacs-set-scope-type 'Tabs))
#+END_SRC

** EVIL
#+BEGIN_SRC emacs-lisp
    (use-package evil :ensure t)

    (with-eval-after-load 'evil-maps
        (define-key evil-motion-state-map (kbd "SPC") nil)
        (define-key evil-motion-state-map (kbd "RET") nil)
        (define-key evil-motion-state-map (kbd "TAB") nil))

      (evil-mode 1)
#+END_SRC

** Org-mode
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))

  (use-package org-evil :ensure t)

  (setq
      org-hide-emphasis-markers t
      org-pretty-entities t
      org-ellipsis "â€¦")

  (setq org-return-follows-link t)
  (setq org-roam-directory (file-truename "~/notes"))
  (use-package org-bullets :ensure t)
  (require 'org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+END_SRC

** LSP
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode :ensure t)

  (setq lsp-keymap-prefix "C-c l")

  (add-hook 'python-mode-hook 'lsp)
  (add-hook 'clangd-mode-hool 'lsp)

  (require 'company)
  (add-hook 'after-init-hook 'global-company-mode)

  (use-package lsp-pyright
  :ensure t
  :hook (python-mode . (lambda  ()
                          (require 'lsp-pyright)
                          (lsp))))
#+END_SRC

** Dashboard
#+BEGIN_SRC emacs-lisp
    (use-package dashboard
        :ensure t
        :config
        (dashboard-setup-startup-hook))
    (setq dashboard-center-content t)
    (setq dashboard-startup-banner "~/.config/emacs/logo.png")
    (setq dashboard-items '(
        (recents . 5)
        (bookmarks . 5)
        (projects . 5)
        (agenda . 5)))

    (message (buffer-name))
#+END_SRC

** Zen-mode
#+BEGIN_SRC emacs-lisp
  (use-package olivetti
    :ensure t
    :hook (olivetti-mode . (lambda ()
                             (display-line-numbers-mode 'toggle))))
#+END_SRC
